import 'package:flutter/material.dart';
import 'package:sizer/sizer.dart';

import '../../core/app_export.dart';
import './widgets/bulk_actions_sheet_widget.dart';
import './widgets/calendar_header_widget.dart';
import './widgets/calendar_view_widget.dart';
import './widgets/create_post_modal_widget.dart';
import './widgets/scheduled_post_card_widget.dart';

class ContentCalendar extends StatefulWidget {
  const ContentCalendar({Key? key}) : super(key: key);

  @override
  State<ContentCalendar> createState() => _ContentCalendarState();
}

class _ContentCalendarState extends State<ContentCalendar>
    with TickerProviderStateMixin {
  bool _isWeekView = true;
  DateTime _focusedDay = DateTime.now();
  DateTime _selectedDay = DateTime.now();
  List<Map<String, dynamic>> _scheduledPosts = [];
  List<Map<String, dynamic>> _selectedPosts = [];
  bool _isSelectionMode = false;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _loadMockData();
  }

  void _loadMockData() {
    setState(() {
      _isLoading = true;
    });

    // Mock scheduled posts data
    _scheduledPosts = [
      {
        "id": 1,
        "content":
            "‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÉ‡∏´‡∏°‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤! üöÄ ‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏≥‡∏™‡∏°‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢",
        "image":
            "https://images.unsplash.com/photo-1611224923853-80b023f02d71?fm=jpg&q=60&w=3000&ixlib=rb-4.0.3",
        "platforms": ["Facebook", "Instagram", "Twitter"],
        "scheduledTime": DateTime.now().add(const Duration(hours: 2)),
        "status": "scheduled",
        "engagement": {"likes": 245, "comments": 18},
        "createdAt": DateTime.now().subtract(const Duration(days: 1)),
      },
      {
        "id": 2,
        "content":
            "Tips ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô üí° ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô",
        "platforms": ["LinkedIn", "Twitter"],
        "scheduledTime": DateTime.now().add(const Duration(days: 1, hours: 10)),
        "status": "scheduled",
        "createdAt": DateTime.now().subtract(const Duration(hours: 3)),
      },
      {
        "id": 3,
        "content":
            "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ß‡πâ‡∏ß‡∏≤‡∏á‡πÉ‡∏à‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ üôè ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏™‡∏°‡∏≠",
        "image":
            "https://images.unsplash.com/photo-1552664730-d307ca884978?fm=jpg&q=60&w=3000&ixlib=rb-4.0.3",
        "platforms": ["Facebook", "Instagram"],
        "scheduledTime": DateTime.now().add(const Duration(days: 2, hours: 14)),
        "status": "scheduled",
        "engagement": {"likes": 189, "comments": 25},
        "createdAt": DateTime.now().subtract(const Duration(hours: 6)),
      },
      {
        "id": 4,
        "content":
            "Workshop ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ü‡∏£‡∏µ! üìö ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç",
        "platforms": ["Facebook", "LinkedIn"],
        "scheduledTime": DateTime.now().add(const Duration(days: 3, hours: 9)),
        "status": "scheduled",
        "createdAt": DateTime.now().subtract(const Duration(hours: 12)),
      },
      {
        "id": 5,
        "content":
            "‡∏™‡∏∏‡∏Ç‡∏™‡∏±‡∏ô‡∏ï‡πå‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå! üéâ ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏°‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à‡πÑ‡∏ß‡πâ",
        "platforms": ["Instagram", "Twitter"],
        "scheduledTime": DateTime.now().subtract(const Duration(hours: 1)),
        "status": "published",
        "engagement": {"likes": 156, "comments": 12},
        "createdAt": DateTime.now().subtract(const Duration(days: 1)),
      },
    ];

    // Simulate loading delay
    Future.delayed(const Duration(milliseconds: 800), () {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppTheme.primaryBackground,
      appBar: _buildAppBar(),
      body: _isLoading ? _buildLoadingState() : _buildBody(),
      floatingActionButton: _buildFloatingActionButton(),
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      backgroundColor: AppTheme.primaryBackground,
      elevation: 0,
      leading: GestureDetector(
        onTap: () => Navigator.pop(context),
        child: Container(
          margin: EdgeInsets.all(2.w),
          decoration: BoxDecoration(
            color: AppTheme.secondaryBackground,
            borderRadius: BorderRadius.circular(8.0),
          ),
          child: CustomIconWidget(
            iconName: 'arrow_back',
            color: AppTheme.textPrimary,
            size: 20,
          ),
        ),
      ),
      title: Text(
        '‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤',
        style: AppTheme.darkTheme.appBarTheme.titleTextStyle,
      ),
      actions: [
        if (_isSelectionMode) _buildSelectionActions(),
        _buildMenuButton(),
      ],
    );
  }

  Widget _buildSelectionActions() {
    return Row(
      children: [
        GestureDetector(
          onTap: _selectAllPosts,
          child: Container(
            margin: EdgeInsets.only(right: 2.w),
            padding: EdgeInsets.symmetric(horizontal: 3.w, vertical: 1.h),
            decoration: BoxDecoration(
              color: AppTheme.accentPrimary.withValues(alpha: 0.1),
              borderRadius: BorderRadius.circular(8.0),
              border: Border.all(
                color: AppTheme.accentPrimary,
                width: 1.0,
              ),
            ),
            child: Text(
              '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
              style: AppTheme.darkTheme.textTheme.bodySmall?.copyWith(
                color: AppTheme.accentPrimary,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
        ),
        GestureDetector(
          onTap: _exitSelectionMode,
          child: Container(
            margin: EdgeInsets.only(right: 3.w),
            child: CustomIconWidget(
              iconName: 'close',
              color: AppTheme.textSecondary,
              size: 24,
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildMenuButton() {
    return GestureDetector(
      onTap: _showMenuOptions,
      child: Container(
        margin: EdgeInsets.only(right: 4.w),
        child: CustomIconWidget(
          iconName: 'more_vert',
          color: AppTheme.textPrimary,
          size: 24,
        ),
      ),
    );
  }

  Widget _buildLoadingState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(
            color: AppTheme.accentPrimary,
          ),
          SizedBox(height: 2.h),
          Text(
            '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤...',
            style: AppTheme.darkTheme.textTheme.bodyMedium?.copyWith(
              color: AppTheme.textSecondary,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBody() {
    return RefreshIndicator(
      onRefresh: _refreshData,
      color: AppTheme.accentPrimary,
      backgroundColor: AppTheme.secondaryBackground,
      child: Column(
        children: [
          CalendarHeaderWidget(
            isWeekView: _isWeekView,
            onToggleView: _toggleView,
            onTodayPressed: _goToToday,
            currentMonth: _getCurrentMonthText(),
          ),
          Expanded(
            child: CalendarViewWidget(
              isWeekView: _isWeekView,
              focusedDay: _focusedDay,
              selectedDay: _selectedDay,
              scheduledPosts: _scheduledPosts,
              onDaySelected: _onDaySelected,
              onPageChanged: _onPageChanged,
              onCreatePost: _showCreatePostModal,
              onPostTap: _onPostTap,
              onPostEdit: _onPostEdit,
              onPostDuplicate: _onPostDuplicate,
              onPostDelete: _onPostDelete,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFloatingActionButton() {
    return FloatingActionButton(
      onPressed: () => _showCreatePostModal(DateTime.now()),
      backgroundColor: AppTheme.accentPrimary,
      child: CustomIconWidget(
        iconName: 'add',
        color: AppTheme.textPrimary,
        size: 24,
      ),
    );
  }

  void _toggleView() {
    setState(() {
      _isWeekView = !_isWeekView;
    });
  }

  void _goToToday() {
    setState(() {
      _focusedDay = DateTime.now();
      _selectedDay = DateTime.now();
    });
  }

  String _getCurrentMonthText() {
    final months = [
      '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°',
      '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå',
      '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°',
      '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô',
      '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°',
      '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
      '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°',
      '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°',
      '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô',
      '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°',
      '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô',
      '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
    ];

    return '${months[_focusedDay.month - 1]} ${_focusedDay.year + 543}';
  }

  void _onDaySelected(DateTime selectedDay, DateTime focusedDay) {
    setState(() {
      _selectedDay = selectedDay;
      _focusedDay = focusedDay;
    });
  }

  void _onPageChanged(DateTime focusedDay) {
    setState(() {
      _focusedDay = focusedDay;
    });
  }

  Future<void> _refreshData() async {
    await Future.delayed(const Duration(seconds: 1));
    _loadMockData();
  }

  void _showCreatePostModal(DateTime? preSelectedDateTime) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => CreatePostModalWidget(
        preSelectedDateTime: preSelectedDateTime,
        onCreatePost: _onCreatePost,
      ),
    );
  }

  void _onCreatePost(Map<String, dynamic> post) {
    setState(() {
      _scheduledPosts.add(post);
    });

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'),
        backgroundColor: AppTheme.success,
      ),
    );
  }

  void _onPostTap(Map<String, dynamic> post) {
    if (_isSelectionMode) {
      _togglePostSelection(post);
    } else {
      _showPostDetails(post);
    }
  }

  void _onPostEdit(Map<String, dynamic> post) {
    // Navigate to edit post screen
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏û‡∏™‡∏ï‡πå'),
        backgroundColor: AppTheme.accentPrimary,
      ),
    );
  }

  void _onPostDuplicate(Map<String, dynamic> post) {
    final duplicatedPost = Map<String, dynamic>.from(post);
    duplicatedPost['id'] = DateTime.now().millisecondsSinceEpoch;
    duplicatedPost['scheduledTime'] =
        (post['scheduledTime'] as DateTime).add(const Duration(hours: 1));
    duplicatedPost['status'] = 'scheduled';

    setState(() {
      _scheduledPosts.add(duplicatedPost);
    });

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('‡∏ó‡∏≥‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'),
        backgroundColor: AppTheme.success,
      ),
    );
  }

  void _onPostDelete(Map<String, dynamic> post) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: AppTheme.secondaryBackground,
        title: Text(
          '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö',
          style: AppTheme.darkTheme.textTheme.titleLarge?.copyWith(
            color: AppTheme.textPrimary,
          ),
        ),
        content: Text(
          '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
          style: AppTheme.darkTheme.textTheme.bodyMedium?.copyWith(
            color: AppTheme.textSecondary,
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
          ),
          TextButton(
            onPressed: () {
              setState(() {
                _scheduledPosts.removeWhere((p) => p['id'] == post['id']);
              });
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'),
                  backgroundColor: AppTheme.success,
                ),
              );
            },
            child: Text(
              '‡∏•‡∏ö',
              style: TextStyle(color: AppTheme.error),
            ),
          ),
        ],
      ),
    );
  }

  void _showPostDetails(Map<String, dynamic> post) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        padding: EdgeInsets.all(4.w),
        decoration: BoxDecoration(
          color: AppTheme.secondaryBackground,
          borderRadius: const BorderRadius.only(
            topLeft: Radius.circular(20.0),
            topRight: Radius.circular(20.0),
          ),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Text(
                  '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏û‡∏™‡∏ï‡πå',
                  style: AppTheme.darkTheme.textTheme.titleLarge?.copyWith(
                    color: AppTheme.textPrimary,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const Spacer(),
                GestureDetector(
                  onTap: () => Navigator.pop(context),
                  child: CustomIconWidget(
                    iconName: 'close',
                    color: AppTheme.textSecondary,
                    size: 24,
                  ),
                ),
              ],
            ),
            SizedBox(height: 3.h),
            ScheduledPostCardWidget(
              post: post,
              onEdit: () {
                Navigator.pop(context);
                _onPostEdit(post);
              },
              onDuplicate: () {
                Navigator.pop(context);
                _onPostDuplicate(post);
              },
              onDelete: () {
                Navigator.pop(context);
                _onPostDelete(post);
              },
            ),
            SizedBox(height: 2.h),
          ],
        ),
      ),
    );
  }

  void _togglePostSelection(Map<String, dynamic> post) {
    setState(() {
      if (_selectedPosts.any((p) => p['id'] == post['id'])) {
        _selectedPosts.removeWhere((p) => p['id'] == post['id']);
        if (_selectedPosts.isEmpty) {
          _isSelectionMode = false;
        }
      } else {
        _selectedPosts.add(post);
      }
    });

    if (_selectedPosts.isNotEmpty) {
      _showBulkActionsSheet();
    }
  }

  void _selectAllPosts() {
    setState(() {
      _selectedPosts = List.from(_scheduledPosts);
    });
    _showBulkActionsSheet();
  }

  void _exitSelectionMode() {
    setState(() {
      _isSelectionMode = false;
      _selectedPosts.clear();
    });
  }

  void _showBulkActionsSheet() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => BulkActionsSheetWidget(
        selectedPosts: _selectedPosts,
        onReschedule: _bulkReschedule,
        onChangePlatforms: _bulkChangePlatforms,
        onDelete: _bulkDelete,
        onCancel: () {
          Navigator.pop(context);
          _exitSelectionMode();
        },
      ),
    );
  }

  void _bulkReschedule() {
    Navigator.pop(context);
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà'),
        backgroundColor: AppTheme.accentPrimary,
      ),
    );
    _exitSelectionMode();
  }

  void _bulkChangePlatforms() {
    Navigator.pop(context);
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°'),
        backgroundColor: AppTheme.accentPrimary,
      ),
    );
    _exitSelectionMode();
  }

  void _bulkDelete() {
    Navigator.pop(context);
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: AppTheme.secondaryBackground,
        title: Text(
          '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö',
          style: AppTheme.darkTheme.textTheme.titleLarge?.copyWith(
            color: AppTheme.textPrimary,
          ),
        ),
        content: Text(
          '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ${_selectedPosts.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
          style: AppTheme.darkTheme.textTheme.bodyMedium?.copyWith(
            color: AppTheme.textSecondary,
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
          ),
          TextButton(
            onPressed: () {
              final selectedIds = _selectedPosts.map((p) => p['id']).toList();
              setState(() {
                _scheduledPosts
                    .removeWhere((post) => selectedIds.contains(post['id']));
              });
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text(
                      '‡∏•‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå ${_selectedPosts.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'),
                  backgroundColor: AppTheme.success,
                ),
              );
              _exitSelectionMode();
            },
            child: Text(
              '‡∏•‡∏ö',
              style: TextStyle(color: AppTheme.error),
            ),
          ),
        ],
      ),
    );
  }

  void _showMenuOptions() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        padding: EdgeInsets.all(4.w),
        decoration: BoxDecoration(
          color: AppTheme.secondaryBackground,
          borderRadius: const BorderRadius.only(
            topLeft: Radius.circular(20.0),
            topRight: Radius.circular(20.0),
          ),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: CustomIconWidget(
                iconName: 'checklist',
                color: AppTheme.textSecondary,
                size: 24,
              ),
              title: Text(
                '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
                style: AppTheme.darkTheme.textTheme.bodyLarge?.copyWith(
                  color: AppTheme.textPrimary,
                ),
              ),
              onTap: () {
                Navigator.pop(context);
                setState(() {
                  _isSelectionMode = true;
                });
              },
            ),
            ListTile(
              leading: CustomIconWidget(
                iconName: 'filter_list',
                color: AppTheme.textSecondary,
                size: 24,
              ),
              title: Text(
                '‡∏Å‡∏£‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå',
                style: AppTheme.darkTheme.textTheme.bodyLarge?.copyWith(
                  color: AppTheme.textPrimary,
                ),
              ),
              onTap: () {
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏£‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå'),
                    backgroundColor: AppTheme.accentPrimary,
                  ),
                );
              },
            ),
            ListTile(
              leading: CustomIconWidget(
                iconName: 'settings',
                color: AppTheme.textSecondary,
                size: 24,
              ),
              title: Text(
                '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô',
                style: AppTheme.darkTheme.textTheme.bodyLarge?.copyWith(
                  color: AppTheme.textPrimary,
                ),
              ),
              onTap: () {
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô'),
                    backgroundColor: AppTheme.accentPrimary,
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }
}
